module "vpc" {
  source = "./vpc"
}

module "eks" {
  source  = "terraform-aws-modules/eks/aws"
  version = "~> 19.0"
  cluster_name    = "hairpin"
  cluster_version = "1.28"
  cluster_endpoint_public_access  = false
  vpc_id                   = module.vpc.vpc_id
  subnet_ids = [for index, subnet in flatten([module.vpc.private_subnets]) : subnet.id]
  control_plane_subnet_ids = [module.vpc.public_subnets]
  cluster_addons = {
    coredns = {
      resolve_conflicts = "OVERWRITE"
    }
    kube-proxy = {
      most_recent = true
    }
    vpc-cni = {
      resolve_conflicts = "OVERWRITE"
    }
  }
  # EKS Managed Node Group(s)
  eks_managed_node_groups = {
    hairpin = {
      min_size     = 2
      max_size     = 3
      desired_size = 2
      instance_types = ["t3.large"]
    }
  }
}
output "eks_cluster_endpoint" {
  value = module.eks.cluster_endpoint
}
output "eks_cluster_oidc_issuer_url" {
  value = module.eks.cluster_oidc_issuer_url
}
output "cluster_certificate_authority_data" {
  value = module.eks.cluster_certificate_authority_data
}

locals {
  lb_controller_iam_role_name         = "hairpin-eks-aws-lb-ctrl"
  lb_controller_service_account_name  = "aws-load-balancer-controller"
}

data "http" "iam_policy_loadbalancer" {
  url = "https://raw.githubusercontent.com/kubernetes-sigs/aws-load-balancer-controller/v2.5.4/docs/install/iam_policy.json"
}

resource "aws_iam_role_policy" "controller" {
  name_prefix = "AWSLoadBalancerControllerIAMPolicy"
  policy      = data.http.iam_policy_loadbalancer.body
  role        = module.lb_controller_role.iam_role_name
}

## ALB Ingress Controller
resource "helm_release" "release" {
  name       = "aws-load-balancer-controller"
  chart      = "aws-load-balancer-controller"
  repository = "https://aws.github.io/eks-charts"
  namespace  = "kube-system"

  
  dynamic "set" {
    for_each = {
      "clusterName"           = module.eks.cluster_name
      "serviceAccount.create" = "true"
      "serviceAccount.name"   = local.lb_controller_service_account_name
      "region"                = "ap-northeast-2"
      "vpcId"                 = module.vpc.vpc_id
      "image.repository"      = "602401143452.dkr.ecr.ap-northeast-2.amazonaws.com/amazon/aws-load-balancer-controller"
      "serviceAccount.annotations.eks\\.amazonaws\\.com/role-arn" = module.lb_controller_role.iam_role_arn
    }
    content {
      name  = set.key
      value = set.value
    }
  }
}

module "lb_controller_role" {
  source = "terraform-aws-modules/iam/aws//modules/iam-assumable-role-with-oidc"

  create_role = true

  role_name        = local.lb_controller_iam_role_name
  role_path        = "/"
  role_description = "Used by AWS Load Balancer Controller for EKS"

  role_permissions_boundary_arn = ""

  provider_url = replace( module.eks.cluster_oidc_issuer_url, "https://", "")
  oidc_fully_qualified_subjects = [
    "system:serviceaccount:kube-system:${local.lb_controller_service_account_name}"
  ]
  oidc_fully_qualified_audiences = [
    "sts.amazonaws.com"
  ]
}
resource "aws_db_instance" "rds" {
  allocated_storage    = 20 //스토리지 용량
  engine               = "mysql"  //db엔진 명시
  engine_version       = "8.0.35" //엔진버전
  instance_class       = "db.t3.medium"
  db_name              = "hairpindb" // 기본으로 생성할 db이름
  username             = "root"
  password             = "password"
  parameter_group_name = "default.mysql8.0" // db파라메터
  skip_final_snapshot  = true
  db_subnet_group_name = aws_db_subnet_group.rds.name
  identifier           = "hairpin-rds"
  vpc_security_group_ids  = [aws_security_group.rds.id]
  storage_encrypted = true
  enabled_cloudwatch_logs_exports = ["audit", "error", "slowquery"]
  backup_retention_period = "7"
  auto_minor_version_upgrade = false
}


# RDS에서 사용할 서브넷그룹을 private subnet을 이용하여 생성
resource "aws_db_subnet_group" "rds" {
  name       = "hairpin-group"
  subnet_ids = [for index, subnet in flatten([module.vpc.private_rds_subnets]) : subnet.id]

  tags = {
    Name = "hairpin-rds"
  }
}

# RDS에서 사용할 보안그룹 생성
resource "aws_security_group" "rds" {
  name        = "hairpin-rds"
  description = "hairpin-rds"
  vpc_id      = module.vpc.vpc_id

  egress {
    from_port        = 0
    to_port          = 0
    protocol         = "-1"
    cidr_blocks      = ["0.0.0.0/0"]
    ipv6_cidr_blocks = ["::/0"]
  }
  

  tags = {
    Name = "hairpin-rds"
  }
}

# bastion과 eks클러스터 내부에서 3306으로 접근 가능하도록 rule설정
resource "aws_security_group_rule" "cluster-name-rds" {
  description       = "hairpin-rds allow from cluster"
  from_port         = 3306
  protocol          = "tcp"
  security_group_id = aws_security_group.rds.id
  source_security_group_id = aws_security_group.rds.id
  to_port           = 3306
  type              = "ingress"
}
output "rds_endpoint" {
  value = aws_db_instance.rds.endpoint
}
